{"version":3,"sources":["common/Header.js","common/CommonFunctions.js","components/users-list/renderer/index.tsx","components/users-list/index.ts","components/user-profile/index.ts","components/user-profile/renderer/index.tsx","components/user-profile-worker/index.ts","components/user-profile-worker/renderer/index.tsx","common/Main.js","common/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","role","type","data-toggle","data-target","href","baseApiUrl","callAPI","url","fetch","method","headers","then","resp","json","catch","err","console","log","UserList","props","state","users","page","pageNum","self","this","data","userList","setState","newData","start_offset","length","Math","ceil","start_count","id","map","item","idx","screen_name","name","React","Component","UserProfile","contact_email","location","profession","works","getUrlId","profile","callUsersWorks","window","pathname","split","pop","title","src","thumbnail","UserProfileWorker","description","published_at","work","Main","path","component","Footer","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a22b8ec9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n\t<header>\n\t\t<nav className=\"navbar navbar-inverse\" role=\"navigation\">\n\t\t\t<div className=\"container-fluid\">\n\t\t\t\t<div className=\"navbar-header\">\n\t\t\t\t\t<button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\n\t\t\t\t\t\t<span className=\"icon-bar\"></span>\n\t\t\t\t\t\t<span className=\"icon-bar\"></span>\n\t\t\t\t\t\t<span className=\"icon-bar\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<a className=\"navbar-brand\" href=\"/pages/users\"><strong>  Users </strong></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</nav>\n\t</header>\n)\n\nexport default Header;","\nexport const baseApiUrl = `https://api.foriio.com/api/v1`;\n\nexport const getUrlId = () => {\n\tvar urlParam = window.location.pathname.split(\"/\").pop();\n\treturn urlParam;\n}\n\nexport function callAPI(url) {\n\n\tlet api_call = fetch(url, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t});\n\n\treturn api_call\n\t\t.then((resp) => resp.json())\n\t\t.then(json => (json))\n\t\t.catch((err) => {\n\t\t\tconsole.log(\"Api call error !!\")\n\t\t});\n}\n\n","\nimport React from 'react';\nimport { baseApiUrl, callAPI } from '../../../common/CommonFunctions';\n\n\nexport class Renderer extends React.Component<{}, State> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            users: [],\n            page: 1,\n            pageNum: 0,\n\n        };\n\n    }\n\n    public async componentDidMount() {\n\n        let url = `${baseApiUrl}/promoted/users`;\n        const self = this;\n\n        callAPI(url)\n            .then(function (data) {\n                let userList = data.users;\n                self.setState({\n                    users: userList\n\n                })\n            })\n\n    }\n\n    public render() {\n        var newData = this.state.users;\n\n        let per_page = 500;\n        const pages = newData && newData.length && Math.ceil(this.state.users.length / per_page);\n        const current_page = this.state.page;\n        const start_offset = (current_page - 1) * per_page;\n        let start_count = 0;\n        return (\n            <div className=\"well\">\n                <table id=\"userTable\" className=\"table table-bordered table-stripped results\">\n                    <tbody>\n\n                        {newData && newData.length > 0 ? newData.map((item, idx) => {\n                            if (idx >= start_offset && start_count < per_page) {\n                                start_count++;\n                                const url = `/pages/user-profile/${item.screen_name}`;\n                                return (\n                                    <tr>\n                                        <td>\n                                            <div>\n                                                <a href={url}> {item.name} </a>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            }\n                        })\n                            : null}\n                    </tbody>\n                </table>\n            </div >\n        );\n    }\n}\n\ninterface State {\n    users: User[];\n    page: number;\n    pageNum: number;\n}\n\ninterface User {\n    id: number;\n    screen_name: string;\n    name: string;\n    profession: string;\n}\n","\nimport { Renderer } from './renderer';\nexport const UserList = Renderer;","\nimport { Renderer } from './renderer';\n//import { withRouter } from 'react-router-dom';\n//export const UserProfile = withRouter(Renderer);\nexport const UserProfile = Renderer;","\nimport React from 'react';\nimport { baseApiUrl, callAPI } from '../../../common/CommonFunctions';\n\nexport class Renderer extends React.Component<{}, State> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            id: '',\n            name: '',\n            contact_email: '',\n            location: '',\n            profession: '',\n            works: [],\n            page: 1,\n            pageNum: 0,\n        };\n\n    }\n\n    public async componentDidMount() {\n\n        const id = this.getUrlId();\n        let url = `${baseApiUrl}/users/${id}/profile`;\n        const self = this;\n\n        callAPI(url)\n            .then(function (data) {\n                self.setState({\n                    name: data.profile.name,\n                    id: data.profile.id,\n                    contact_email: data.profile.contact_email,\n                    profession: data.profile.profession,\n                    location: data.profile.location,\n                })\n            })\n        this.callUsersWorks();\n\n    }\n\n    callUsersWorks() {\n        const id = this.getUrlId();\n        let url = `${baseApiUrl}/users/${id}/works`;\n        const self = this;\n\n        callAPI(url)\n            .then(function (data) {\n                self.setState({\n                    works: data.works\n                })\n            })\n    }\n\n    public getUrlId() {\n        var urlParam = window.location.pathname.split(\"/\").pop();\n        return urlParam;\n    }\n\n    public render() {\n        var newData = this.state.works;\n\n        let per_page = 500;\n        const pages = newData && newData.length && Math.ceil(this.state.works.length / per_page);\n        const current_page = this.state.page;\n        const start_offset = (current_page - 1) * per_page;\n        let start_count = 0;\n\n        return (\n            <div className=\"well\" >\n                <div>\n                    Name : {this.state.name}\n                </div>\n                <div>\n                    Email : {this.state.contact_email}\n                </div>\n                <div>\n                    Location : {this.state.location}\n                </div>\n                <div>\n                    Profession : {this.state.profession}\n                </div>\n                <br />\n                <div>\n                    {this.state.name} Work\n                </div>\n                <br />\n                <table id=\"userTable\" className=\"table table-bordered table-stripped results\">\n                    <tbody>\n\n                        {newData && newData.length > 0 ? newData.map((item, idx) => {\n                            if (idx >= start_offset && start_count < per_page) {\n                                start_count++;\n                                const url = `/pages/user-profile-worker/${item.id}`;\n                                return (\n                                    <tr>\n                                        <td>\n                                            <div>\n                                                {item.title}\n                                                <a href={url}> <img src={item.thumbnail} /></a>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            }\n                        })\n                            : null}\n                    </tbody>\n                </table>\n\n            </div >\n        );\n    }\n}\n\ninterface State {\n    id: string;\n    name: string;\n    contact_email: string;\n    location: string;\n    profession: string;\n    works: Worrk[];\n    page: number;\n    pageNum: number;\n}\n\ninterface Worrk {\n    id: number;\n    title: string;\n    published_at: string;\n    thumbnail: string;\n    category_list: string;\n    user_roles: string;\n\n}\n\n\n","\nimport { Renderer } from './renderer';\nexport const UserProfileWorker = Renderer;","\nimport React from 'react';\nimport { baseApiUrl, callAPI } from '../../../common/CommonFunctions';\n\n\nexport class Renderer extends React.Component<{}, State> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            id: '',\n            title: '',\n            description: '',\n            thumbnail: '',\n            published_at: ''\n\n        };\n\n    }\n\n    public async componentDidMount() {\n\n        const id = this.getUrlId();\n        let url = `${baseApiUrl}/works//${id}`;\n        const self = this;\n\n        callAPI(url)\n            .then(function (data) {\n                self.setState({\n                    title: data.work.title,\n                    id: data.work.id,\n                    description: data.work.description,\n                    published_at: data.work.published_at,\n                    thumbnail: data.work.thumbnail\n                })\n            })\n\n\n        // const id = this.getUrlId();\n        // let url = `https://api.foriio.com/api/v1/works/${id}`;\n        // const self = this;\n\n\n        // let api_call = fetch(url, {\n        //     method: 'GET',\n        //     headers: {\n        //         'Content-Type': 'application/json'\n        //     },\n        // });\n\n        // api_call.then((resp) => resp.json())\n        //     .then(function (data) {\n        //         self.setState({\n        //             title: data.work.title,\n        //             id: data.work.id,\n        //             description: data.work.description\n        //         })\n        //     }).catch((err) => {\n        //         console.log(\"Api call error !!\")\n        //     });\n    }\n\n    public getUrlId() {\n        var urlParam = window.location.pathname.split(\"/\").pop();\n        return urlParam;\n    }\n\n    public render() {\n\n        return (\n            <div className=\"well\">\n                <div>\n                    Title :   {this.state.title}\n                </div>\n                <div>\n                    Description :   {this.state.description}\n                </div>\n                <div>\n                    Published :   {this.state.published_at}\n                </div>\n                <div>\n                    <img src={this.state.thumbnail} />\n                </div>\n\n            </div >\n        );\n    }\n}\n\ninterface State {\n    id: string;\n    title: string;\n    description: string;\n    published_at: string;\n    thumbnail: string\n}\n\n\n\n\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { UserList } from '../components/users-list';\nimport { UserProfile } from '../components/user-profile';\nimport { UserProfileWorker } from '../components/user-profile-worker';\n\n\nconst Main = () => (\n    <main>\n        <Switch>\n            <Route path='/pages/users' component={UserList} />\n            <Route path='/pages/user-profile/:id' component={UserProfile} />\n            <Route path='/pages/user-profile-worker/:id' component={UserProfileWorker} />\n\n        </Switch>\n    </main>\n)\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => (\n\t<div>\n\t\t\n\t</div>\n)\n\nexport default Footer;","import React from 'react';\nimport './App.css';\n// import { MessageFormPage } from './components/message-form-page';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>\n//           A letter to Santa\n//         </h1>\n//       </header>\n\n//       <main>\n//         <MessageFormPage />\n//       </main>\n\n//       <footer>\n//         Made with\n//         <a href=\"https://glitch.com\">Glitch</a>!\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//import React from 'react';\nimport Header from './common/Header';\nimport Main from './common/Main';\nimport Footer from './common/Footer';\n\nconst App = () => (\n  <div>\n    <Header />\n    <Main />\n    <Footer />\n  </div>\n)\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}